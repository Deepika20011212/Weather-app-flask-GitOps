name: CI-CD Weather-Air-App

on:
  push:
    branches: [main]
  

env:
  AWS_REGION: ap-south-1  
  CLUSTER_NAME: demo-eks
  HELM_CHART_DIR: ./helm/weather-air
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  build-test-analyze:
    name: Build, Test, SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r weather_service/requirements.txt
          pip install -r air_service/requirements.txt
          pip install -r frontend/requirements.txt
          pip install pytest

      - name: Run Unit Tests
        run: |
          pytest -q

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          host-url: ${{ env.SONAR_HOST_URL }}
          token: ${{ env.SONAR_TOKEN }}

  docker-scan-push:
    name: Build, Trivy Scan, Push to ECR
    runs-on: ubuntu-latest
    needs: build-test-analyze
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set IMAGE tag
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV  

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master

      - name: Build and Push Weather Service
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/weather-service:${IMAGE_TAG`}"
          docker build -t $IMAGE ./weather_service
          trivy image --exit-code 0 --ignore-unfixed --no-progress $IMAGE || true
          docker push $IMAGE
          echo "WEATHER_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build and Push Air Service
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/air-service:${IMAGE_TAG}"
          docker build -t $IMAGE ./air_service
          trivy image --exit-code 0 --ignore-unfixed --no-progress $IMAGE || true
          docker push $IMAGE
          echo "AIR_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build and Push Frontend
        run: |
          IMAGE="${{ steps.ecr.outputs.registry }}/frontend:${IMAGE_TAG}"
          docker build -t $IMAGE ./frontend
          trivy image --exit-code 0 --ignore-unfixed --no-progress $IMAGE || true
          docker push $IMAGE
          echo "FRONTEND_IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Update values.yaml
        run: |
          sed -i "s|weatherService:.*|weatherService: ${WEATHER_IMAGE}|g" $HELM_CHART_DIR/values.yaml
          sed -i "s|airService:.*|airService: ${AIR_IMAGE}|g" $HELM_CHART_DIR/values.yaml
          sed -i "s|frontend:.*|frontend: ${FRONTEND_IMAGE}|g" $HELM_CHART_DIR/values.yaml

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: docker-scan-push
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy Helm Chart
        run: |
          helm upgrade --install weather-air $HELM_CHART_DIR
