{{- $replicas := .Values.replicaCount }}

# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: {{ .Values.redis.image }}
          ports:
            - containerPort: {{ .Values.redis.port }}
          command: ["redis-server","--save","","--appendonly","no"]

---

# Weather Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-service
spec:
  replicas: {{ $replicas }}
  selector:
    matchLabels:
      app: weather-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: weather-service
    spec:
      containers:
        - name: weather
          image: {{ .Values.weatherService.image }}
          ports:
            - containerPort: {{ .Values.weatherService.port }}
          env:
            - name: REDIS_HOST
              value: {{ .Values.weatherService.redisHost }}
            - name: REDIS_PORT
              value: "{{ .Values.weatherService.redisPort }}"
            - name: OPENWEATHER_API_KEY
              value: {{ .Values.weatherService.openWeatherApiKey }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.weatherService.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.weatherService.port }}
            initialDelaySeconds: 30
            periodSeconds: 20

---

# Air Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: air-service
spec:
  replicas: {{ $replicas }}
  selector:
    matchLabels:
      app: air-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: air-service
    spec:
      containers:
        - name: air
          image: {{ .Values.airService.image }}
          ports:
            - containerPort: {{ .Values.airService.port }}
          env:
            - name: REDIS_HOST
              value: {{ .Values.airService.redisHost }}
            - name: REDIS_PORT
              value: "{{ .Values.airService.redisPort }}"
            - name: OPENWEATHER_API_KEY
              value: {{ .Values.airService.openWeatherApiKey }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.airService.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.airService.port }}
            initialDelaySeconds: 30
            periodSeconds: 20

---

# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: {{ $replicas }}
  selector:
    matchLabels:
      app: frontend
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: {{ .Values.frontend.image }}
          ports:
            - containerPort: {{ .Values.frontend.port }}
          env:
            - name: WEATHER_API_BASE
              value: {{ .Values.frontend.weatherApiBase }}
            - name: AIR_API_BASE
              value: {{ .Values.frontend.airApiBase }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.frontend.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.frontend.port }}
            initialDelaySeconds: 30
            periodSeconds: 20
